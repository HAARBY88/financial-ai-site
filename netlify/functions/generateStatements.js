// netlify/functions/generateStatements.js
// Accepts JSON { framework, companyName, notes, files:[{kind,name,mimeType,base64}] }
// Sends a multimodal request (text + files) to Gemini using @google/genai.

import { GoogleGenAI, createUserContent, createPartFromBuffer } from "@google/genai";

// ——— Helpers ———
function json(statusCode, obj) {
  return {
    statusCode,
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(obj),
  };
}

function buildPrompt({ framework, companyName, notes }) {
  return `
You are an expert ${framework} financial reporting assistant.
Using the uploaded documents (prior-year PDF and/or current-year trial balance in Excel),
generate a professional draft of the current-year financial statements for "${companyName || "the company"}".
Reflect the structure and tone of the prior report when present. Map amounts from the trial balance where possible.
Clearly flag any missing disclosures required by ${framework}.

User notes:
${notes || "(none)"}

Output sections:
1) Statement of Profit or Loss (with comparatives)
2) Statement of Financial Position (with comparatives)
3) Key accounting policies (brief)
4) Key notes (revenue, leases, instruments, PPE/intangibles)
5) Missing disclosures list
`.trim();
}

const ALLOWED_MIME = new Set([
  "application/pdf",
  "application/vnd.ms-excel",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
]);

export async function handler(event) {
  try {
    if (event.httpMethod !== "POST") {
      return json(405, { error: "Method Not Allowed" });
    }

    // Env
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) return json(500, { error: "Missing GEMINI_API_KEY" });

    // Model (set in Netlify env if you like)
    const modelName = process.env.GEMINI_MODEL || "gemini-2.5-flash";

    // Parse JSON
    let body = {};
    try {
      body = JSON.parse(event.body || "{}");
    } catch {
      return json(400, { error: "Invalid JSON body" });
    }

    const {
      framework = "IFRS",
      companyName = "",
      notes = "",
      files = [],
    } = body;

    if (!Array.isArray(files)) return json(400, { error: "`files` must be an array" });
    if (files.length === 0) return json(400, { error: "Please include at least one file in base64" });

    // Decode base64 files → Buffers → Gemini parts
    const parts = [];
    for (const f of files) {
      if (!f?.base64 || !f?.mimeType) continue;

      // Basic MIME allowlist
      if (!ALLOWED_MIME.has(f.mimeType)) {
        return json(400, {
          error: `Unsupported MIME type: ${f.mimeType}. Upload PDF or Excel (.xls/.xlsx).`,
        });
      }
      // Decode
      try {
        const buf = Buffer.from(f.base64, "base64");
        // 50 MB soft-check (you can adjust)
        if (buf.length > 50 * 1024 * 1024) {
          return json(400, {
            error: `File too large: ${f.name || "unnamed"} (~${Math.round(buf.length / 1024 / 1024)} MB)`,
          });
        }
        // Add as a multimodal part
        parts.push(createPartFromBuffer(buf, f.mimeType));
      } catch (e) {
        return json(400, { error: `Failed to decode file: ${f?.name || "unnamed"}` });
      }
    }

    if (parts.length === 0) {
      return json(400, { error: "No valid files after decoding (PDF/Excel only)." });
    }

    const prompt = buildPrompt({ framework, companyName, notes });

    // Call Gemini
    const genAI = new GoogleGenAI({ apiKey });
    const response = await genAI.models.generateContent({
      model: modelName,
      contents: [createUserContent([prompt, ...parts])],
    });

    // Extract text
    const text = response?.text?.();
    if (!text) {
      return json(502, { error: "No text generated by Gemini", modelTried: modelName });
    }

    return json(200, { output: text, model: modelName });
  } catch (err) {
    console.error("generateStatements error:", err);
    return json(500, {
      error: "Gemini request failed",
      details: err?.message || String(err),
    });
  }
}





