// netlify/functions/generateStatements.js
// No multipart parsing. Accepts JSON with base64 files.
// Requires: npm i @google/genai node-fetch
import { GoogleGenAI, createUserContent, createPartFromBuffer } from "@google/genai";

export async function handler(event) {
  try {
    if (event.httpMethod !== "POST") {
      return json(405, { error: "Method Not Allowed" });
    }

    const apiKey = process.env.GEMINI_API_KEY;
    const modelName = process.env.GEMINI_MODEL || "gemini-2.5-flash";
    if (!apiKey) return json(500, { error: "Missing GEMINI_API_KEY" });

    let body = {};
    try { body = JSON.parse(event.body || "{}"); }
    catch { return json(400, { error: "Invalid JSON body" }); }

    const { framework = "IFRS", companyName = "", notes = "", files = [] } = body;
    if (!Array.isArray(files)) return json(400, { error: "`files` must be an array" });
    if (files.length === 0) return json(400, { error: "Please include at least one file in base64" });

    // Decode base64 files and prepare parts
    const parts = [];
    for (const f of files) {
      if (!f?.base64 || !f?.mimeType) continue;
      try {
        const buf = Buffer.from(f.base64, "base64");
        parts.push(createPartFromBuffer(buf, f.mimeType));
      } catch (e) {
        return json(400, { error: `Failed to decode file: ${f?.name || "unnamed"}` });
      }
    }
    if (parts.length === 0) return json(400, { error: "No valid files after decoding." });

    const prompt = buildPrompt({ framework, companyName, notes });

    const genAI = new GoogleGenAI({ apiKey });
    const response = await genAI.models.generateContent({
      model: modelName,
      contents: [createUserContent([prompt, ...parts])]
    });

    const text = response?.text?.();
    if (!text) return json(502, { error: "No text generated by Gemini" });

    return json(200, { output: text, model: modelName });
  } catch (err) {
    console.error("generateStatements error:", err);
    return json(500, { error: "Gemini request failed", details: err?.message || String(err) });
  }
}

function buildPrompt({ framework, companyName, notes }) {
  return `
You are an expert ${framework} financial reporting assistant.
Using the uploaded documents (prior-year PDF and/or current-year trial balance in Excel), generate a professional draft of the current-year financial statements for "${companyName || "the company"}".
Reflect the structure and tone of the prior report when present. Map amounts from the trial balance where possible.
Clearly flag any missing disclosures required by ${framework}.

User notes:
${notes || "(none)"}

Output sections:
1) Statement of Profit or Loss (with comparatives)
2) Statement of Financial Position (with comparatives)
3) Key accounting policies (brief)
4) Key notes (revenue, leases, instruments, PPE/intangibles)
5) Missing disclosures list
`.trim();
}

function json(statusCode, obj) {
  return { statusCode, headers: { "Content-Type": "application/json" }, body: JSON.stringify(obj) };
}








